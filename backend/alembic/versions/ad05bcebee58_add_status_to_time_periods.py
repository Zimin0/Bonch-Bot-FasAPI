from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'ad05bcebee58'
down_revision = '6e22e6a53152'
branch_labels = None
depends_on = None

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_settings_id', table_name='settings')
    op.drop_table('settings')

    # Создаем ENUM тип для status
    status_enum = postgresql.ENUM('booked', 'free', 'break_between_bookings', name='statusenum')
    status_enum.create(op.get_bind())

    # Добавляем новое поле со значением по умолчанию
    op.add_column('time_periods', sa.Column('status', sa.Enum('booked', 'free', 'break_between_bookings', name='statusenum'), nullable=False, server_default='free'))

    # Обновляем существующие записи
    op.execute("UPDATE time_periods SET status='free' WHERE status IS NULL")

    # Убираем значение по умолчанию
    op.alter_column('time_periods', 'status', server_default=None)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('time_periods', 'status')
    status_enum = postgresql.ENUM('booked', 'free', 'break_between_bookings', name='statusenum')
    status_enum.drop(op.get_bind())

    op.create_table('settings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('slug', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('value', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='settings_pkey'),
    sa.UniqueConstraint('slug', name='settings_slug_key')
    )
    op.create_index('ix_settings_id', 'settings', ['id'], unique=False)
    # ### end Alembic commands ###
