"""Make physical_number primary key in PC and remove id

Revision ID: de4fc39dda34
Revises: f8e08c04bd76
Create Date: 2024-06-14 02:50:21.448713

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'de4fc39dda34'
down_revision = 'f8e08c04bd76'
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa

from alembic import op
import sqlalchemy as sa

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_settings_id', table_name='settings')
    op.drop_table('settings')

    # Шаг 1: Добавить столбец с временным значением по умолчанию
    op.add_column('pc_sessions', sa.Column('pc_physical_number', sa.Integer(), server_default='0'))
    op.add_column('time_periods', sa.Column('pc_physical_number', sa.Integer(), server_default='0'))

    # Шаг 2: Обновить существующие записи
    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)

    # Проверка существования значений в таблице pcs
    pcs = session.execute(sa.text("SELECT id, physical_number FROM pcs")).fetchall()
    pcs_map = {pc.id: pc.physical_number for pc in pcs}

    # Обновить pc_sessions
    pc_sessions = session.execute(sa.text("SELECT id, computer_id FROM pc_sessions")).fetchall()
    for pc_session in pc_sessions:
        if pc_session.computer_id in pcs_map:
            session.execute(
                sa.text("UPDATE pc_sessions SET pc_physical_number = :physical_number WHERE id = :id"),
                {'physical_number': pcs_map[pc_session.computer_id], 'id': pc_session.id}
            )

    # Обновить time_periods
    time_periods = session.execute(sa.text("SELECT id, computer_id FROM time_periods")).fetchall()
    for time_period in time_periods:
        if time_period.computer_id in pcs_map:
            session.execute(
                sa.text("UPDATE time_periods SET pc_physical_number = :physical_number WHERE id = :id"),
                {'physical_number': pcs_map[time_period.computer_id], 'id': time_period.id}
            )

    session.commit()

    # Шаг 3: Удалить временное значение по умолчанию и добавить ограничение NOT NULL
    op.alter_column('pc_sessions', 'pc_physical_number', existing_type=sa.Integer(), nullable=False, server_default=None)
    op.alter_column('time_periods', 'pc_physical_number', existing_type=sa.Integer(), nullable=False, server_default=None)

    # Удалить старые ограничения и индексы
    op.drop_constraint('pc_sessions_computer_id_fkey', 'pc_sessions', type_='foreignkey')
    op.drop_column('pc_sessions', 'computer_id')
    op.drop_index('ix_pcs_id', table_name='pcs')
    op.drop_constraint('pcs_physical_number_key', 'pcs', type_='unique')

    # Создать новые ограничения и индексы
    op.create_index(op.f('ix_pcs_physical_number'), 'pcs', ['physical_number'], unique=True)
    op.create_foreign_key(None, 'pc_sessions', 'pcs', ['pc_physical_number'], ['physical_number'])
    op.create_foreign_key(None, 'time_periods', 'pcs', ['pc_physical_number'], ['physical_number'])

    op.drop_constraint('time_periods_computer_id_fkey', 'time_periods', type_='foreignkey')
    op.drop_column('time_periods', 'computer_id')
    
    # ### end Alembic commands ###

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('time_periods', sa.Column('computer_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'time_periods', type_='foreignkey')
    op.create_foreign_key('time_periods_computer_id_fkey', 'time_periods', 'pcs', ['computer_id'], ['id'])
    op.drop_column('time_periods', 'pc_physical_number')
    op.drop_index(op.f('ix_pcs_physical_number'), table_name='pcs')
    op.create_unique_constraint('pcs_physical_number_key', 'pcs', ['physical_number'])
    op.create_index('ix_pcs_id', 'pcs', ['id'], unique=False)
    op.add_column('pc_sessions', sa.Column('computer_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'pc_sessions', type_='foreignkey')
    op.create_foreign_key('pc_sessions_computer_id_fkey', 'pc_sessions', 'pcs', ['computer_id'], ['id'])
    op.drop_column('pc_sessions', 'pc_physical_number')
    op.create_table('settings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('slug', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('value', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='settings_pkey'),
    sa.UniqueConstraint('slug', name='settings_slug_key')
    )
    op.create_index('ix_settings_id', 'settings', ['id'], unique=False)
    # ### end Alembic commands ###
